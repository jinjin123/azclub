<?php

/**
 * @file
 * Contains mailgroup.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Render\Element;
use Drupal\mailgroup\Entity\MailGroup;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_toolbar_alter().
 */
function mailgroup_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'mailgroup/toolbar';
}

/**
 * Implements hook_entity_delete().
 */
function mailgroup_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\mailgroup\Entity\MailGroupInterface $entity */

  if ($entity->getEntityTypeId() == 'mailgroup') {
    $logger = \Drupal::logger('mailgroup');
    $members = $entity->getMembers();
    $messages = $entity->getMessages();

    /** @var \Drupal\mailgroup\Entity\MailGroupMembershipInterface $membership */
    foreach ($members as $membership) {
      try {
        $membership->delete();
      }
      catch (EntityStorageException $e) {
        $logger->error(t('Unable to delete membership for @email', [
          '@email' => $membership->getEmail(),
        ]));
      }
    }

    /** @var \Drupal\mailgroup\Entity\MailGroupMessageInterface $message */
    foreach ($messages as $message) {
      try {
        $membership->delete();
      }
      catch (EntityStorageException $e) {
        $logger->error(t('Unable to delete message @label', [
          '@label' => $message->label(),
        ]));
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function mailgroup_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'group_send':
      $message['headers']['bcc'] = $params['emails'];
      $message['headers']['From'] = $params['from'];
      $message['from'] = $params['from'];
      $message['subject'] = t('@subject', ['@subject' => $params['subject']], $options);
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function mailgroup_theme() {
  return [
    'mailgroup' => [
      'render element' => 'elements',
      'template' => 'mailgroup',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function mailgroup_theme_suggestions_mailgroup(array $variables) {
  $suggestions = [];
  $group = $variables['elements']['#mailgroup'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'mailgroup__' . $sanitized_view_mode;
  $suggestions[] = 'mailgroup__' . $group->bundle();
  $suggestions[] = 'mailgroup__' . $group->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'mailgroup__' . $group->id();
  $suggestions[] = 'mailgroup__' . $group->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for mail group templates.
 *
 * Default template: mailgroup.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_mailgroup(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for mail group message templates.
 *
 * Default template: mailgroup_message.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_mailgroup_message(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Gets all mail groups.
 *
 * @param bool $active
 *   Boolean indicating if only active groups should be returned.
 *
 * @return array
 *   An array of mail groups.
 */
function mailgroup_get_groups($active = TRUE) {
  $query = \Drupal::entityQuery('mailgroup');

  if ($active) {
    $query->condition('status', 1);
  }

  $group_ids = $query->execute();
  $groups = MailGroup::loadMultiple($group_ids);

  return $groups;
}
